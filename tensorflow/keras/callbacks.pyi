from typing import Any, Iterable, Literal, Mapping, Sequence

from tensorflow.keras import Model
from tensorflow.keras.optimizers.schedules import LearningRateSchedule

class Callback:
    model: Model[Any, object]
    params: dict[str, Any]
    def set_model(self, model: Model[Any, object]) -> None: ...
    def set_params(self, params: dict[str, Any]) -> None: ...
    def on_batch_begin(self, batch: int, logs: Mapping[str, object] | None = None) -> None: ...
    def on_batch_end(self, batch: int, logs: Mapping[str, object] | None = None) -> None: ...
    def on_epoch_begin(self, epoch: int, logs: Mapping[str, object] | None = None) -> None: ...
    def on_epoch_end(self, epoch: int, logs: Mapping[str, object] | None = None) -> None: ...
    def on_predict_batch_begin(self, batch: int, logs: Mapping[str, object] | None = None) -> None: ...
    def on_predict_batch_end(self, batch: int, logs: Mapping[str, object] | None = None) -> None: ...
    def on_predict_begin(self, logs: Mapping[str, object] | None = None) -> None: ...
    def on_predict_end(self, logs: Mapping[str, object] | None = None) -> None: ...
    def on_test_batch_begin(self, batch: int, logs: Mapping[str, object] | None = None) -> None: ...
    def on_test_batch_end(self, batch: int, logs: Mapping[str, object] | None = None) -> None: ...
    def on_test_begin(self, logs: Mapping[str, object] | None = None) -> None: ...
    def on_test_end(self, logs: Mapping[str, object] | None = None) -> None: ...
    def on_train_batch_begin(self, batch: int, logs: Mapping[str, object] | None = None) -> None: ...
    def on_train_batch_end(self, batch: int, logs: Mapping[str, object] | None = None) -> None: ...
    def on_train_begin(self, logs: Mapping[str, object] | None = None) -> None: ...
    def on_train_end(self, logs: Mapping[str, object] | None = None) -> None: ...

# A CallbackList has exact same api as a callback,
# but does not actually subclass it.
class CallbackList:
    def __init__(
        self,
        callbacks: Sequence[Callback] | None = None,
        add_history: bool = False,
        add_progbar: bool = False,
        model: Model[object, object] | None = None,
        **params: Any,
    ) -> None: ...
    def set_model(self, model: Model[object, object]) -> None: ...
    def set_params(self, params: dict[str, Any]) -> None: ...
    def on_batch_begin(self, batch: int, logs: Mapping[str, object] | None = None) -> None: ...
    def on_batch_end(self, batch: int, logs: Mapping[str, object] | None = None) -> None: ...
    def on_epoch_begin(self, epoch: int, logs: Mapping[str, object] | None = None) -> None: ...
    def on_epoch_end(self, epoch: int, logs: Mapping[str, object] | None = None) -> None: ...
    def on_predict_batch_begin(self, batch: int, logs: Mapping[str, object] | None = None) -> None: ...
    def on_predict_batch_end(self, batch: int, logs: Mapping[str, object] | None = None) -> None: ...
    def on_predict_begin(self, logs: Mapping[str, object] | None = None) -> None: ...
    def on_predict_end(self, logs: Mapping[str, object] | None = None) -> None: ...
    def on_test_batch_begin(self, batch: int, logs: Mapping[str, object] | None = None) -> None: ...
    def on_test_batch_end(self, batch: int, logs: Mapping[str, object] | None = None) -> None: ...
    def on_test_begin(self, logs: Mapping[str, object] | None = None) -> None: ...
    def on_test_end(self, logs: Mapping[str, object] | None = None) -> None: ...
    def on_train_batch_begin(self, batch: int, logs: Mapping[str, object] | None = None) -> None: ...
    def on_train_batch_end(self, batch: int, logs: Mapping[str, object] | None = None) -> None: ...
    def on_train_begin(self, logs: Mapping[str, object] | None = None) -> None: ...
    def on_train_end(self, logs: Mapping[str, object] | None = None) -> None: ...

class History(Callback):

    history: dict[str, list[Any]]

class ModelCheckpoint(Callback):
    monitor_op: Any

class TensorBoard(Callback):
    _start_batch: int
    _stop_batch: int
    def __init__(
        self,
        log_dir: str = "logs",
        histogram_freq: int = 0,
        write_graph: bool = True,
        write_images: bool = False,
        write_steps_per_second: bool = False,
        update_freq: str | int = "epoch",
        profile_batch: int | tuple[int, int] = 0,
        embeddings_freq: int = 0,
        embeddings_metadata: dict[str, None] | None = None,
    ) -> None: ...

class BackupAndRestore(Callback):
    def __init__(self, backup_dir: str) -> None: ...

class BaseLogger(Callback):
    def __init__(self, stateful_metrics: Iterable[str] | None) -> None: ...

class CSVLogger(Callback):
    def __init__(self, filename: str, separator: str = ",", append: bool = False) -> None: ...

class EarlyStopping(Callback):
    monitor_op: Any

class LearningRateScheduler(Callback):
    def __init__(self, schedule: LearningRateSchedule, verbose: Literal[0, 1] = 0) -> None: ...

class ProgbarLogger(Callback):
    use_steps: bool
    def __init__(
        self, count_mode: Literal["steps", "samples"] = "samples", stateful_metrics: Iterable[str] | None = None
    ) -> None: ...
