from typing import Iterable, TypeVar
from typing_extensions import Self

from abc import ABC, abstractmethod

import tensorflow as tf
from tensorflow import Operation, Tensor
from tensorflow.keras.layers import Layer

_OutputT = TypeVar("_OutputT", bound=Tensor | dict[str, Tensor])

class Metric(Layer[Tensor, _OutputT], ABC):
    def merge_state(self, metrics: Iterable[Self]) -> list[Operation]: ...
    def reset_state(self) -> None: ...
    @abstractmethod
    def update_state(self) -> Operation: ...
    @abstractmethod
    def result(self) -> _OutputT: ...
    def call(self, inputs: Tensor) -> _OutputT: ...

class AUC(Metric[tf.Tensor]):
    def __init__(self, num_thresholds: int = 200, name: str | None = None): ...
    def update_state(self) -> Operation: ...
    def result(self) -> tf.Tensor: ...
    def compute_output_shape(self): ...
